const express=require("express"),app=express(),fs=require("fs"),open=require("open"),options={key:fs.readFileSync("./fake-keys/privatekey.pem"),cert:fs.readFileSync("./fake-keys/certificate.pem")},serverPort=process.env.PORT||4040,https=require("https"),http=require("http");let server;server=process.env.LOCAL?https.createServer(options,app):http.createServer(app);const io=require("socket.io")(server);function socketIdsInRoom(name){let collection=[],socketIds=io.nsps["/"].adapter.rooms[name];if(socketIds)for(let key in socketIds)collection.push(key);return collection}app.get("/",(function(req,res){res.sendFile(__dirname+"/app.html")})),app.get("/connectedUsers",(function(req,res){let collection=[],socketIds=io.nsps["/"].adapter.rooms[1];if(socketIds)for(let key in socketIds)collection.push(key);res.send(collection)})),server.listen(serverPort,(function(){console.log("server up and running at %s port",serverPort),process.env.LOCAL&&open("https://localhost:"+serverPort)})),io.on("connection",(function(socket){socket.on("leave",(function(name,callback){if(console.log("leave"),socket.room){var room=socket.room;io.to(room).emit("leave",socket.id),socket.leave(room)}})),socket.on("join",(function(name,callback){var socketIds;console.log("join",name),callback(socketIdsInRoom(name)),socket.join(name),socket.room=name})),socket.on("exchange",(function(data){var to;console.log("exchange",data),data.from=socket.id,io.sockets.connected[data.to].emit("exchange",data)}))}));